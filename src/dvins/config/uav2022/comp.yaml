%YAML:1.0

#common parameters
imu_topic: "/camera/imu"
image_topic: "/camera/color/image_raw/compressed"
depth_topic: "/camera/aligned_depth_to_color/image_raw"
output_path: "/home/aiden"


#camera calibration
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
max_depth: 6.0  # max accurate depth of rgbd camera
min_depth: 0.1  # min accurate depth of rgbd camera
depth_cov: 0.005 # depth measurement cov when depth = 1

#TODO modify distortion
distortion_parameters:
   k1: 0.10981707696733878
   k2: -0.2596508152545224
   p1: -0.00047874650512554713
   p2: -0.0018447855562127064
projection_parameters:
   fx: 583.6092372748109
   fy: 583.8529457523713
   cx: 322.3093788988131
   cy: 235.2873500376188

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        

# Extrinsic parameter betweenimage_heightDon't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9998954857252874, -0.014434876883598471, 0.0008074376429018316, 
          0.014452072475117785, 0.9994860680042583, -0.028613588844489803,
          -0.00039398904269446106, 0.028622267463339148, 0.9995902213296665]

extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 0.028407845895756244, 0.014478058663862755, -0.07881266729577568]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
use_fast: 1             # if it equals to 1, we extract and track fast feature, otherwise we use GFTT from opencv
use_rgbd: 1             # if using rgbd camera, turn on it. Depth residuals will be added to sliding window optimization and initialization
min_fast_resp: 10       # min response of fast feature


#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)
reproj_threshold: 10.0

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheel
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5

g_norm: 9.805       # gravity magnitude

#loop_closure closure parameters
loop_closure: 1                    # start loop_closure closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/aiden" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ