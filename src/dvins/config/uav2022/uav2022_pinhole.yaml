%YAML:1.0

#common parameters
# imu_topic: "/imu/filter"
imu_topic: "/imu/imu"
# imu_topic: "/mavros/imu/data_raw"
# imu_topic: "/mavros/imu/data"
image_topic: "/mvsua_cam/image_raw1"
output_path: "/home/rmua3/vins_output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 1024
image_height: 1280
distortion_parameters:
   k1: -0.00017125954071618715
   k2: -0.012104795511131593
   p1: 0.001658181349536189
   p2: -0.0018420537120595521
projection_parameters:
   fx: 552.3727175934893
   fy: 551.3690813752378
   cx: 515.6888538377987
   cy: 593.2158945307743

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.0362148,     0.999188,    0.0176554,
          -0.999148,    0.0365517,   -0.0191465,
          -0.0197763,    -0.016947,     0.999661]
   # data: [ 0.00316728,  0.00215792,  0.99999266,
   #        -0.9999367,   0.01080323,  0.00314379, 
   #        -0.01079636, -0.99993932,  0.002192]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00203855, -0.000668924, 0.0284257]
   # data: [0.09538442, -0.00378917, -0.01922019]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
use_fast: 1             # if it equals to 1, we extract and track fast feature, otherwise we use GFTT from opencv
use_rgbd: 0             # if using rgbd camera, turn on it. Depth residuals will be added to sliding window optimization and initialization
min_fast_resp: 10       # min response of fast feature

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 30.0 # keyframe selection threshold (pixel)
reproj_threshold: 5.0

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.12          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.012         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.0012         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 7.66e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/rmua3/vins_output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
